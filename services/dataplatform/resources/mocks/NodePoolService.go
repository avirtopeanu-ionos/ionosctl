// Code generated by MockGen. DO NOT EDIT.
// Source: nodepool.go

// Package mock_resources is a generated GoMock package.
package mock_resources

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	resources "github.com/ionos-cloud/ionosctl/services/dataplatform/resources"
)

// MockNodePoolsService is a mock of NodePoolsService interface.
type MockNodePoolsService struct {
	ctrl     *gomock.Controller
	recorder *MockNodePoolsServiceMockRecorder
}

// MockNodePoolsServiceMockRecorder is the mock recorder for MockNodePoolsService.
type MockNodePoolsServiceMockRecorder struct {
	mock *MockNodePoolsService
}

// NewMockNodePoolsService creates a new mock instance.
func NewMockNodePoolsService(ctrl *gomock.Controller) *MockNodePoolsService {
	mock := &MockNodePoolsService{ctrl: ctrl}
	mock.recorder = &MockNodePoolsServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNodePoolsService) EXPECT() *MockNodePoolsServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockNodePoolsService) Create(clusterId string, nodePool resources.CreateNodePoolRequest) (resources.NodePoolResponseData, *resources.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", clusterId, nodePool)
	ret0, _ := ret[0].(resources.NodePoolResponseData)
	ret1, _ := ret[1].(*resources.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Create indicates an expected call of Create.
func (mr *MockNodePoolsServiceMockRecorder) Create(clusterId, nodePool interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockNodePoolsService)(nil).Create), clusterId, nodePool)
}

// Delete mocks base method.
func (m *MockNodePoolsService) Delete(clusterId, nodePoolId string) (resources.NodePoolResponseData, *resources.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", clusterId, nodePoolId)
	ret0, _ := ret[0].(resources.NodePoolResponseData)
	ret1, _ := ret[1].(*resources.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Delete indicates an expected call of Delete.
func (mr *MockNodePoolsServiceMockRecorder) Delete(clusterId, nodePoolId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockNodePoolsService)(nil).Delete), clusterId, nodePoolId)
}

// Get mocks base method.
func (m *MockNodePoolsService) Get(clusterId, nodePoolId string) (resources.NodePoolResponseData, *resources.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", clusterId, nodePoolId)
	ret0, _ := ret[0].(resources.NodePoolResponseData)
	ret1, _ := ret[1].(*resources.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Get indicates an expected call of Get.
func (mr *MockNodePoolsServiceMockRecorder) Get(clusterId, nodePoolId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockNodePoolsService)(nil).Get), clusterId, nodePoolId)
}

// List mocks base method.
func (m *MockNodePoolsService) List(clusterId string) (resources.NodePoolListResponseData, *resources.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", clusterId)
	ret0, _ := ret[0].(resources.NodePoolListResponseData)
	ret1, _ := ret[1].(*resources.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// List indicates an expected call of List.
func (mr *MockNodePoolsServiceMockRecorder) List(clusterId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockNodePoolsService)(nil).List), clusterId)
}

// Update mocks base method.
func (m *MockNodePoolsService) Update(clusterId, nodePoolId string, cluster resources.PatchNodePoolRequest) (resources.NodePoolResponseData, *resources.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", clusterId, nodePoolId, cluster)
	ret0, _ := ret[0].(resources.NodePoolResponseData)
	ret1, _ := ret[1].(*resources.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Update indicates an expected call of Update.
func (mr *MockNodePoolsServiceMockRecorder) Update(clusterId, nodePoolId, cluster interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockNodePoolsService)(nil).Update), clusterId, nodePoolId, cluster)
}
