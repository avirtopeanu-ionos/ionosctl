/*
 * VM Auto Scaling Service (part of CloudAPI)
 *
 * Provides Endpoints to manage the Autoscaling feature by IONOS cloud
 *
 * API version: 1-SDK.1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ionoscloud

import (
	"encoding/json"
)

// TemplateNic struct for TemplateNic
type TemplateNic struct {
	// Lan Id for this template Nic.
	Lan *int32 `json:"lan,omitempty"`
	// Name for this template Nic.
	Name *string `json:"name,omitempty"`
}



// GetLan returns the Lan field value
// If the value is explicit nil, the zero value for int32 will be returned
func (o *TemplateNic) GetLan() *int32 {
	if o == nil {
		return nil
	}


	return o.Lan

}

// GetLanOk returns a tuple with the Lan field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TemplateNic) GetLanOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}


	return o.Lan, true
}

// SetLan sets field value
func (o *TemplateNic) SetLan(v int32) {


	o.Lan = &v

}

// HasLan returns a boolean if a field has been set.
func (o *TemplateNic) HasLan() bool {
	if o != nil && o.Lan != nil {
		return true
	}

	return false
}



// GetName returns the Name field value
// If the value is explicit nil, the zero value for string will be returned
func (o *TemplateNic) GetName() *string {
	if o == nil {
		return nil
	}


	return o.Name

}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TemplateNic) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}


	return o.Name, true
}

// SetName sets field value
func (o *TemplateNic) SetName(v string) {


	o.Name = &v

}

// HasName returns a boolean if a field has been set.
func (o *TemplateNic) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}


func (o TemplateNic) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}

	if o.Lan != nil {
		toSerialize["lan"] = o.Lan
	}
	

	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	
	return json.Marshal(toSerialize)
}

type NullableTemplateNic struct {
	value *TemplateNic
	isSet bool
}

func (v NullableTemplateNic) Get() *TemplateNic {
	return v.value
}

func (v *NullableTemplateNic) Set(val *TemplateNic) {
	v.value = val
	v.isSet = true
}

func (v NullableTemplateNic) IsSet() bool {
	return v.isSet
}

func (v *NullableTemplateNic) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTemplateNic(val *TemplateNic) *NullableTemplateNic {
	return &NullableTemplateNic{value: val, isSet: true}
}

func (v NullableTemplateNic) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTemplateNic) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


